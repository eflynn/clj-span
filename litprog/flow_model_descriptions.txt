"Plain English" SPAN flow model descriptions
Author: Gary W. Johnson
Date: 03/19/2012

* Overview

In this document, we describe eight implementations of the Service
Path Attribution Networks framework, one per ecosystem service
currently modelled by the ARIES system. Each one is given three
matrices with the same numbers of rows and columns, which represent
the continuous, spatial distribution of three variables over the same
geographic extent. All three represent some feature relevant to the
type of matter, energy, or information -- called the service medium --
whose movement through space is the purpose of the given SPAN
implementation.

The first matrix shows the distribution of the service medium's
*source*. That is, each cell in the matrix records the amount of the
medium that should be generated by this geospatial location over the
course of the simulation.

The second matrix contains the distribution of the landscape's
absorption capacity with respect to the service medium in the same
units as the source matrix. We call these values the ecosystem service
*sink*.

The third matrix depicts the distribution of human populations or
assets that are likely to be affected, for better or worse, by
interaction with the service medium and may be either represented as a
simple binary presence/absence matrix or with a varying demand value
per cell in the same units as the source matrix. This matrix is called
the ecosystem service *use*. In the event that the service medium is
beneficial to people (e.g. drinking water, pollen for crops, scenic
views), *use* locations can be seen as potential beneficiaries of an
ecosystem good or service. If the service medium is detrimental to
people (e.g. floodwater, wildfire, storm surges), *use* locations will
represent populations or assets that are potentially vulnerable to an
ecosystem-generated threat.

At the start of each SPAN simulation, one service carrier object is
created in each source location with an initial weight equal to the
value in the source matrix at that location (a density) times the area
of that cell, so that each service carrier moves a volume around the
matrix.

In order to determine each carrier's path through the matrix, each of
the eight models below may need additional matrices for
topography-related variables. For example, the water supply, sediment
transport, and flood prevention models all need matrices containing
the spatial distribution of elevation and hydrologic networks. Which
variables are needed for service carrier routing varies from model to
model and will be described in each of the sections below as needed.

Over the course of each simulation, these carriers will move from cell
to cell through the matrix space, until either they become stuck in
one cell permanently, they move beyond the bounds of the matrix's
edges, or their weight falls below the *transition threshold*. This
value, given in the same units as the *source* matrix, is the minimum
amount of the service medium that the model user is interested in
keeping track of. Thus, any service carriers with weights below this
value are moving an insignificantly small amount of the medium around
and will be disregarded by the simulation from there on.

Whenever a carrier encounters a *sink* location, it will give up some
of its weight to that *sink* based on the absorption capacity still
remaining in the cell at that point in the simulation. After this new
absorption, the remaining *sink* value will be reduced by the carrier
weight absorbed.

Whenever a carrier encounters a *use* location, a new carrier is
stored in that cell, containing the entire route taken from the
original *source* cell as well as a list of all the *sinks*
encountered along this path and the amount of the carrier's weight
that was absorbed by each of them. Finally, this stored carrier is
given a weight, representing the amount of the service medium that
affects this location for good or ill.

If the usage process is destructive (e.g. water is taken from streams
to drink, thereby reducing the amount of downstream water available),
then the stored carrier's weight will be equal to the remaining *use*
value in this location. As with *sink* locations, this *use* value
will be reduced by the weight captured from the service carrier in
this step. Similarly, the moving service carrier's weight is reduced
by the stored amount prior to moving on to the next cell in the
matrix.

If the usage process is non-destructive (e.g. floodwater encounters
one *use* location, damages its assets, and continues on to cause
damage to other *use* locations without the service carrier losing
water to these encounters), then the stored carrier's weight will be
equal to the full remaining weight of the moving service carrier. This
carrier will then move on to the next cell in the matrix without
losing any of the weight with which it entered the *use* location.

The SPAN simulation may be considered complete once all the moving
service carriers have been terminated according to the conditions set
forth above. At this point, all of the stored carriers are collected
from the *use* locations and passed to a set of sixteen
post-simulation analysis functions. Each of these functions produces a
new matrix, containing the spatial distribution of one of the
following variables:

|-----------+--------------+-----------------------------------------------------|
| Component | Specifier    | Relation to Service Medium                          |
|-----------+--------------+-----------------------------------------------------|
| Source    | Theoretical  | Expected production at origin                       |
| Source    | Actual       | Amount produced which reaches a use location        |
| Source    | Possible     | Same as Actual Source but excludes sink effects     |
| Source    | Inaccessible | Difference between Theoretical and Possible Source  |
| Source    | Blocked      | Difference between Possible and Actual Source       |
|-----------+--------------+-----------------------------------------------------|
| Sink      | Theoretical  | Expected absorption capacity at origin              |
| Sink      | Actual       | Amount absorbed along simulated flow paths          |
| Sink      | Inaccessible | Difference between Theoretical and Actual Sink      |
|-----------+--------------+-----------------------------------------------------|
| Use       | Theoretical  | Expected demand/vulnerability at origin             |
| Use       | Actual       | Amount received along simulated flow paths          |
| Use       | Possible     | Same as Actual Use but excludes sink effects        |
| Use       | Inaccessible | Difference between Theoretical and Possible Use     |
| Use       | Blocked      | Difference between Possible and Actual Use          |
|-----------+--------------+-----------------------------------------------------|
| Flow      | Actual       | Amount delivered to a use location through this one |
| Flow      | Possible     | Same as Actual Flow but excludes sink effects       |
| Flow      | Blocked      | Difference between Possible and Actual Flow         |
|-----------+--------------+-----------------------------------------------------|

These values are given as densities in their respective matrices so as
to be commensurate with the original input *source*, *sink*, and *use*
matrices.

* Carbon (CO2Removed)

The amount of carbon sequestration produced is distributed among the
users (carbon emitters) according to their relative use values after
being initially reduced by the sink values due to landscape emissions
(release of stored carbon due to fire or deforestation).

1. Compute ha-per-cell given cell-width and cell-height in meters.

2. Draw sample worlds.

   1. Multiply values in source, sink, and use layers by ha-per-cell.

   2. Create 10 sample layers each for source, sink, and use by
      drawing a deterministic value from each pixel's distribution.

   3. For each sample world (i.e. one sample layer each for source, sink, and use):

      1. Calculate the total source, sink, and use values (sum across all pixels).

      2. Split the total source into amount sunk per pixel and source
         remaining per pixel by comparing it with the total
         sink. (computing actual sink)

      3. Split the total source into amount used per pixel and source
         remaining per pixel by comparing it with the total
         use. (computing possible use)

      4. Split the post-sink source remaining into amount used per
         pixel and source remaining per pixel by comparing it with the
         total use. (computing actual use)

      5. Normalize all source and use values between [0-1] by dividing
         by their totals.

      6. Pair every source pixel with every sink pixel, and for each
         such pair, multiply the normalized source value by the actual
         sink value. This calculates the amount each source pixel
         loses to each sink pixel.

      7. Pair every source pixel with every use pixel, and for each
         such pair, multiply the normalized source value by the
         possible use value. This calculates the possible amount each
         source pixel contributes to each use pixel.

      8. Pair every source pixel with every use pixel, and for each
         such pair, multiply the normalized source value by the actual
         use value. This calculates the actual amount each source
         pixel contributes to each use pixel.

      9. For each triplet combination of source, sink, and use pixels,
         multiply the normalized source value by the normalized use
         value and then by the actual sink value to compute the effect
         of each sink on each pair of source and use point.

3. Combine sample worlds.

   1. Organize all the information from the draw sample worlds step by
      use point. {use-point -> [possible-weight actual-weight sink-effects]}

   2. Merge all worlds together by building up a distribution of the
      possible-weight, actual-weight, and sink-effects values per use
      pixel from the 10 Monte Carlo world samples.

   3. Divide the final possible-weight, actual-weight, and
      sink-effects values by ha-per-cell to turn them back into
      densities for comparison with the original input layers.
* Line of Sight (LineOfSight)

Finds a line of sight path between source and use points, checks
for obstructions, and determines (using elevation info) how much of
the source element can be seen from the use point.  A distance
decay function is applied to the results to compute the visual
utility originating from the source point.

- For each pair of source point and use point, wherein the points are
   not in the same location (no in situ use):

  1. Compute the euclidean distance in meters between the center of
     the source and use pixels.

  2. Calculate the source decay at this distance, and proceed if
     positive. Otherwise, there is no view service between this
     source and use point.

  3. Look up the elevation at every point between the source and use
     locations.

  4. Take the difference in meters between each elevation along this
     view line and the use point's elevation. (compute the rises)

  5. Calculate the euclidean distance in meters between every point
     along this view line and the use location. (compute the runs)

  6. Calculate each of the view obstruction slopes along the view
     line by dividing each rise by its corresponding run.

  7. Select the maximum view obstruction slope from these values to
     be the determinant of how much of the source we can and cannot
     see along this view line.

  8. Compute the view elevation in meters projected onto the source
     by multiplying the maximum view obstruction slope by the
     euclidean distance between the source and use points in meters
     and adding this value to the use elevation.

  9. If the projected view elevation is negative (because the view
     obstruction slope was negative), then set it to 0.

  10. If the slope is positive, then we are looking up, so only count
      the visible part of the source value. If the projected view
      elevation is greater than the source elevation, then we can't
      see it, so the source value is 0. Otherwise, the visible source
      value is the fraction of the total source elevation above the
      projected view elevation times the total source value.

  11. If the slope is negative, then we are looking straight ahead or
      down, so count the whole feature if we can see any part of
      it. Thus, if the projected view elevation is greater than the
      source elevation, we can't see it, and the visible source value
      is 0. Otherwise, the visible source value is the total source
      value.

  12. Finally, multiply the visible source value by the source decay
      at that distance to compute the possible weight transmitted
      from this source point to the use point.

  13. If the possible weight is below the transition threshold, then
      there is no service along this view line. Otherwise, continue
      with the next step.

  14. For each sink location along the sight line, calculate the
      visible sink value using the same algorithm as with the source
      (e.g. project view elevation onto sink, multiply sink value by
      fraction of sink elevation visible above the project view
      elevation), and finally multiply the visible sink value by the
      sink decay at its distance from the use point.

  15. Compute the actual weight as the possible weight minus the sum
      of the sink effects along the sight line. If this value is
      negative (because sinks outweigh the source value), set it
      to 0.

- Source Decay: ramp up in 1 mile, slow decay to 5 miles, fast decay to 20 miles, moderate decay to 40 miles, then gone

- Sink Decay: slow decay to 1/2 mile, fast decay to 1 mile, gone after 1 mile

* Coastal Storm Protection ()
* Flood Water ()
* Proximity ()
* Sediment ()
* Subsistence Fisheries ()
* Surface Water ()
